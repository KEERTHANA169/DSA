//it take O(n^2) time complexity
class Solution { 
    public int pivotIndex(int[] nums) {
        for(int i=0;i<nums.length;i++)
        {
            int prefixsum=0;
            int suffixsum=0;

            for(int j=0;j<i;j++)    prefixsum+=nums[j]; 
            for(int j=i+1;j<nums.length;j++)    suffixsum+=nums[j]; 
            if(prefixsum==suffixsum)    return i;  
        }
        return -1;
    }
}
// Optimized Version (O(n) time, O(1) space):
/*class Solution {
    public int pivotIndex(int[] nums) {
        int total = 0;
        for (int num : nums) total += num;

        int leftSum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (leftSum == total - leftSum - nums[i]) return i;
            leftSum += nums[i];
        }
        return -1;
    }
}*/
